const ll inf = INT32_MAX, MOD = 1e9 + 7, N = 1e5;
int Tree[4 * N], lst[N];
void buildTree(int ind, int l, int r)
{
    if (l == r)
    {
        Tree[ind] = lst[l];
        return ;
    }
    int mid = (l + r) >> 1;
    buildTree(2 * ind, l, mid);
    buildTree(2 * ind + 1, mid + 1, r);
    Tree[ind] = min(Tree[2 * ind], Tree[2 * ind + 1]);
}
void update(int ind, int l, int r, int pos, int val)
{
    if (l == r)
    {
        lst[pos] = val;
        Tree[ind] = val;
        return ;
    }
    int mid = (l + r) >> 1;
    if (pos <= mid) update(2 * ind, l, mid, pos, val);
    else update(2 * ind + 1, mid + 1, r, pos, val);
    Tree[ind] = min(Tree[2 * ind], Tree[2 * ind + 1]);
}
int quary(int ind, int l, int r, int start, int end)
{
    if (l >= start && r <= end)
        return Tree[ind];
    int mid = (l + r) >> 1;
    if (start > mid) return quary(2 * ind + 1, mid + 1, r, start, end);
    else if (end <= mid) return quary(2 * ind, l, mid, start, end);
    else
    {
        int a = quary(2 * ind + 1, mid + 1, r, mid + 1, end);
        int b = quary(2 * ind, l, mid, start, mid);
        return min(a, b);
    }
}
